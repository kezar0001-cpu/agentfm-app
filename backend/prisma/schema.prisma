generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                  @id @default(cuid())
  email                   String                  @unique
  passwordHash            String
  firstName               String
  lastName                String
  phone                   String?
  role                    Role
  isActive                Boolean                 @default(true)
  lastLoginAt             DateTime?
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  orgId                   String?
  company                 String?
  subscriptionPlan        SubscriptionPlan        @default(FREE_TRIAL)
  subscriptionStatus      SubscriptionStatus      @default(TRIAL)
  trialEndDate            DateTime?
  emailVerified           Boolean                 @default(false)
  assignedInspections     Inspection[]            @relation("AssignedTechnician")
  completedInspections    Inspection[]            @relation("CompletedBy")
  inspectionAuditLogs     InspectionAuditLog[]
  inspectionReminders     InspectionReminder[]
  uploadedAttachments     InspectionAttachment[] @relation("InspectionAttachmentUploadedBy")
  sentInvites             Invite[]                @relation("InvitedBy")
  receivedInvite          Invite?                 @relation("InvitedUser")
  assignedJobs            Job[]                   @relation("AssignedTechnician")
  notifications           Notification[]
  OwnerProfile            OwnerProfile?
  managedProperties       Property[]              @relation("PropertyManager")
  PropertyManagerProfile  PropertyManagerProfile?
  ownedProperties         PropertyOwner[]
  approvedRecommendations Recommendation[]        @relation("ApprovedBy")
  createdRecommendations  Recommendation[]        @relation("CreatedBy")
  serviceRequests         ServiceRequest[]
  subscriptions           Subscription[]
  TechnicianProfile       TechnicianProfile?
  TenantProfile           TenantProfile?
  tenantUnits             UnitTenant[]
  Org                     Org?                    @relation(fields: [orgId], references: [id])

  @@index([email])
  @@index([role])
}

model Invite {
  id            String       @id @default(cuid())
  email         String
  role          Role
  token         String       @unique
  status        InviteStatus @default(PENDING)
  expiresAt     DateTime
  createdAt     DateTime     @default(now())
  invitedById   String
  invitedUserId String?      @unique
  propertyId    String?
  unitId        String?
  invitedBy     User         @relation("InvitedBy", fields: [invitedById], references: [id], onDelete: Cascade)
  invitedUser   User?        @relation("InvitedUser", fields: [invitedUserId], references: [id])
  property      Property?    @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  unit          Unit?        @relation(fields: [unitId], references: [id], onDelete: Cascade)

  @@index([email])
  @@index([token])
  @@index([status])
}

model Subscription {
  id                     String             @id @default(cuid())
  userId                 String
  planId                 String
  planName               String
  status                 SubscriptionStatus @default(TRIAL)
  stripeCustomerId       String?            @unique
  stripeSubscriptionId   String?            @unique
  stripeCurrentPeriodEnd DateTime?
  trialStartDate         DateTime           @default(now())
  trialEndDate           DateTime?
  startDate              DateTime           @default(now())
  endDate                DateTime?
  cancelledAt            DateTime?
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @updatedAt
  user                   User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
}

model Property {
  id              String            @id @default(cuid())
  name            String
  address         String
  city            String
  state           String
  zipCode         String
  country         String            @default("USA")
  propertyType    String
  yearBuilt       Int?
  totalUnits      Int               @default(0)
  totalArea       Float?
  status          PropertyStatus    @default(ACTIVE)
  description     String?
  imageUrl        String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  managerId       String
  inspections     Inspection[]
  invites         Invite[]
  jobs            Job[]
  plans           MaintenancePlan[]
  manager         User              @relation("PropertyManager", fields: [managerId], references: [id], onDelete: Cascade)
  owners          PropertyOwner[]
  serviceRequests ServiceRequest[]
  units           Unit[]

  @@index([managerId])
  @@index([status])
  @@index([city, state])
}

model PropertyOwner {
  id                  String    @id @default(cuid())
  propertyId          String
  ownerId             String
  ownershipPercentage Float     @default(100.0)
  startDate           DateTime  @default(now())
  endDate             DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  owner               User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  property            Property  @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@unique([propertyId, ownerId])
  @@index([propertyId])
  @@index([ownerId])
}

model Unit {
  id              String           @id @default(cuid())
  unitNumber      String
  propertyId      String
  floor           Int?
  bedrooms        Int?
  bathrooms       Float?
  area            Float?
  rentAmount      Float?
  status          UnitStatus       @default(AVAILABLE)
  description     String?
  imageUrl        String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  inspections     Inspection[]
  invites         Invite[]
  jobs            Job[]
  serviceRequests ServiceRequest[]
  property        Property         @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  tenants         UnitTenant[]

  @@unique([propertyId, unitNumber])
  @@index([propertyId])
  @@index([status])
}

model UnitTenant {
  id            String   @id @default(cuid())
  unitId        String
  tenantId      String
  leaseStart    DateTime
  leaseEnd      DateTime
  rentAmount    Float
  depositAmount Float?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  tenant        User     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  unit          Unit     @relation(fields: [unitId], references: [id], onDelete: Cascade)

  @@index([unitId])
  @@index([tenantId])
  @@index([isActive])
}

model Inspection {
  id              String            @id @default(cuid())
  title           String
  type            InspectionType
  scheduledDate   DateTime
  completedDate   DateTime?
  propertyId      String
  unitId          String?
  assignedToId    String?
  completedById   String?
  status          InspectionStatus  @default(SCHEDULED)
  notes           String?
  findings        String?
  tags            String[]          @default([])
  photos          String[]          @default([])
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  assignedTo      User?             @relation("AssignedTechnician", fields: [assignedToId], references: [id])
  completedBy     User?             @relation("CompletedBy", fields: [completedById], references: [id])
  property        Property          @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  unit            Unit?             @relation(fields: [unitId], references: [id], onDelete: Cascade)
  attachments     InspectionAttachment[]
  auditLogs       InspectionAuditLog[]
  reminders       InspectionReminder[]
  jobs            Job[]
  report          Report?

  @@index([propertyId])
  @@index([unitId])
  @@index([assignedToId])
  @@index([status])
  @@index([scheduledDate])
}

model Job {
  id                String           @id @default(cuid())
  title             String
  description       String
  priority          JobPriority      @default(MEDIUM)
  status            JobStatus        @default(OPEN)
  propertyId        String?
  unitId            String?
  assignedToId      String?
  serviceRequestId  String?
  maintenancePlanId String?
  inspectionId      String?
  scheduledDate     DateTime?
  completedDate     DateTime?
  estimatedCost     Float?
  actualCost        Float?
  evidence          Json?
  notes             String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  assignedTo        User?            @relation("AssignedTechnician", fields: [assignedToId], references: [id])
  Inspection        Inspection?      @relation(fields: [inspectionId], references: [id])
  maintenancePlan   MaintenancePlan? @relation(fields: [maintenancePlanId], references: [id])
  property          Property?        @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  serviceRequest    ServiceRequest?  @relation(fields: [serviceRequestId], references: [id])
  unit              Unit?            @relation(fields: [unitId], references: [id], onDelete: Cascade)

  @@index([propertyId])
  @@index([unitId])
  @@index([assignedToId])
  @@index([status])
  @@index([priority])
  @@index([scheduledDate])
  @@index([inspectionId])
}

model MaintenancePlan {
  id                String    @id @default(cuid())
  name              String
  description       String?
  propertyId        String
  frequency         String
  nextDueDate       DateTime
  lastCompletedDate DateTime?
  autoCreateJobs    Boolean   @default(false)
  isActive          Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  jobs              Job[]
  property          Property  @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@index([propertyId])
  @@index([isActive])
  @@index([nextDueDate])
}

model ServiceRequest {
  id            String                 @id @default(cuid())
  title         String
  description   String
  category      ServiceRequestCategory
  priority      JobPriority            @default(MEDIUM)
  status        ServiceRequestStatus   @default(SUBMITTED)
  propertyId    String
  unitId        String?
  requestedById String
  photos        String[]               @default([])
  reviewNotes   String?
  reviewedAt    DateTime?
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  jobs          Job[]
  property      Property               @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  requestedBy   User                   @relation(fields: [requestedById], references: [id], onDelete: Cascade)
  unit          Unit?                  @relation(fields: [unitId], references: [id])

  @@index([propertyId])
  @@index([unitId])
  @@index([requestedById])
  @@index([status])
  @@index([category])
}

model Report {
  id              String           @id @default(cuid())
  title           String
  inspectionId    String           @unique
  summary         String
  findings        String
  pdfUrl          String?
  data            Json?
  generatedDate   DateTime         @default(now())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  recommendations Recommendation[]
  inspection      Inspection       @relation(fields: [inspectionId], references: [id], onDelete: Cascade)

  @@index([inspectionId])
  @@index([generatedDate])
}

model Recommendation {
  id              String               @id @default(cuid())
  title           String
  description     String
  reportId        String
  estimatedCost   Float?
  priority        JobPriority          @default(MEDIUM)
  status          RecommendationStatus @default(DRAFT)
  createdById     String
  approvedById    String?
  approvedAt      DateTime?
  implementedAt   DateTime?
  rejectionReason String?
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  approvedBy      User?                @relation("ApprovedBy", fields: [approvedById], references: [id])
  createdBy       User                 @relation("CreatedBy", fields: [createdById], references: [id], onDelete: Cascade)
  report          Report               @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@index([reportId])
  @@index([status])
  @@index([createdById])
}

model Notification {
  id         String           @id @default(cuid())
  userId     String
  type       NotificationType
  title      String
  message    String
  isRead     Boolean          @default(false)
  readAt     DateTime?
  entityType String?
  entityId   String?
  createdAt  DateTime         @default(now())
  user       User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
}

model InspectionAttachment {
  id            String      @id @default(cuid())
  inspectionId  String
  name          String      @map("fileName")
  mimeType      String      @map("fileType")
  url           String      @map("fileUrl")
  size          Int?
  annotations   Json?
  uploadedById  String?
  createdAt     DateTime    @default(now()) @map("uploadedAt")
  inspection    Inspection  @relation(fields: [inspectionId], references: [id], onDelete: Cascade)
  uploadedBy    User?       @relation("InspectionAttachmentUploadedBy", fields: [uploadedById], references: [id])

  @@index([inspectionId])
}

model InspectionAuditLog {
  id           String     @id @default(cuid())
  action       String
  changes      Json?
  createdAt    DateTime   @default(now()) @map("timestamp")
  inspectionId String
  userId       String?
  inspection   Inspection @relation(fields: [inspectionId], references: [id], onDelete: Cascade)
  user         User?      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([inspectionId])
  @@index([createdAt])
  @@index([userId])
}

model InspectionReminder {
  id           String     @id @default(cuid())
  inspectionId String
  remindAt     DateTime   @map("reminderDate")
  sentAt       DateTime?
  channel      String
  recipients   String[]   @default([])
  metadata     Json?
  createdById  String     @map("userId")
  inspection   Inspection @relation(fields: [inspectionId], references: [id], onDelete: Cascade)
  createdBy    User       @relation(fields: [createdById], references: [id], onDelete: Cascade)

  @@index([inspectionId])
  @@index([remindAt])
  @@index([createdById])
}

model Org {
  id        String   @id
  name      String
  createdAt DateTime @default(now())
  User      User[]
}

model OwnerProfile {
  id     String @id
  userId String @unique
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PropertyManagerProfile {
  id                String   @id
  userId            String   @unique
  managedProperties Json?
  permissions       Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime
  User              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TechnicianProfile {
  id     String @id
  userId String @unique
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TenantProfile {
  id     String @id
  userId String @unique
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  PROPERTY_MANAGER
  OWNER
  TENANT
  TECHNICIAN
}

enum SubscriptionStatus {
  TRIAL
  ACTIVE
  PENDING
  SUSPENDED
  CANCELLED
}

enum PropertyStatus {
  ACTIVE
  INACTIVE
  UNDER_MAINTENANCE
}

enum UnitStatus {
  AVAILABLE
  OCCUPIED
  MAINTENANCE
  VACANT
}

enum InviteStatus {
  PENDING
  ACCEPTED
  EXPIRED
}

enum InspectionStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum InspectionType {
  ROUTINE
  MOVE_IN
  MOVE_OUT
  EMERGENCY
  COMPLIANCE
}

enum JobStatus {
  OPEN
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum JobPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ServiceRequestStatus {
  SUBMITTED
  UNDER_REVIEW
  APPROVED
  CONVERTED_TO_JOB
  REJECTED
  COMPLETED
}

enum ServiceRequestCategory {
  PLUMBING
  ELECTRICAL
  HVAC
  APPLIANCE
  STRUCTURAL
  PEST_CONTROL
  LANDSCAPING
  GENERAL
  OTHER
}

enum RecommendationStatus {
  DRAFT
  SUBMITTED
  UNDER_REVIEW
  APPROVED
  REJECTED
  IMPLEMENTED
}

enum NotificationType {
  INSPECTION_SCHEDULED
  INSPECTION_REMINDER
  JOB_ASSIGNED
  JOB_COMPLETED
  SERVICE_REQUEST_UPDATE
  SUBSCRIPTION_EXPIRING
  PAYMENT_DUE
  SYSTEM
}

enum SubscriptionPlan {
  FREE_TRIAL
  STARTER
  PROFESSIONAL
  ENTERPRISE
}
