// Complete AgentFM MVP Schema (updated)

// ======================================================
// GENERATOR & DATASOURCE
// ======================================================
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ======================================================
// ENUMS
// ======================================================
enum Role {
  PROPERTY_MANAGER
  OWNER
  TENANT
  TECHNICIAN
}

enum SubscriptionStatus {
  TRIAL
  ACTIVE
  PENDING
  SUSPENDED
  CANCELLED
}

// NEW: user-level plan (used by your auth logic)
enum SubscriptionPlan {
  FREE_TRIAL
  STARTER
  PROFESSIONAL
  ENTERPRISE
}

enum PropertyStatus {
  ACTIVE
  INACTIVE
  UNDER_MAINTENANCE
}

enum UnitStatus {
  AVAILABLE
  OCCUPIED
  MAINTENANCE
  VACANT
}

enum InviteStatus {
  PENDING
  ACCEPTED
  EXPIRED
}

enum InspectionStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum InspectionType {
  ROUTINE
  MOVE_IN
  MOVE_OUT
  EMERGENCY
  COMPLIANCE
}

enum JobStatus {
  OPEN
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum JobPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ServiceRequestStatus {
  SUBMITTED
  UNDER_REVIEW
  APPROVED
  CONVERTED_TO_JOB
  REJECTED
  COMPLETED
}

enum ServiceRequestCategory {
  PLUMBING
  ELECTRICAL
  HVAC
  APPLIANCE
  STRUCTURAL
  PEST_CONTROL
  LANDSCAPING
  GENERAL
  OTHER
}

enum RecommendationStatus {
  DRAFT
  SUBMITTED
  UNDER_REVIEW
  APPROVED
  REJECTED
  IMPLEMENTED
}

enum NotificationType {
  INSPECTION_SCHEDULED
  INSPECTION_REMINDER
  JOB_ASSIGNED
  JOB_COMPLETED
  SERVICE_REQUEST_UPDATE
  SUBSCRIPTION_EXPIRING
  PAYMENT_DUE
  SYSTEM
}

// ======================================================
// NEW: ORG & PROFILES (used by your auth code)
// ======================================================
model Org {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())

  users     User[]
}

model PropertyManagerProfile {
  id          String @id @default(cuid())
  userId      String @unique
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Your code writes arrays/objects here — store as JSON
  managedProperties Json?
  permissions       Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Simple shells so selecting them in /me won’t break if you keep them
model OwnerProfile {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TechnicianProfile {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TenantProfile {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// ======================================================
// USER & AUTHENTICATION
// ======================================================
model User {
  id            String   @id @default(cuid())
  email         String   @unique
  passwordHash  String
  firstName     String
  lastName      String
  phone         String?
  role          Role
  isActive      Boolean  @default(true)
  lastLoginAt   DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // NEW: org relation used throughout your auth code
  orgId         String?
  org           Org?     @relation(fields: [orgId], references: [id])

  // NEW: optional company (you show this in the Sign Up UI)
  company       String?

  // NEW: user-level subscription fields (checked in /login & OAuth)
  subscriptionPlan   SubscriptionPlan   @default(FREE_TRIAL)
  subscriptionStatus SubscriptionStatus  @default(TRIAL)
  trialEndDate       DateTime?
  subscriptionCurrentPeriodEnd DateTime?
  subscriptionCancelAt        DateTime?
  emailVerified      Boolean            @default(false)

  // NEW: profiles referenced by /me
  propertyManagerProfile PropertyManagerProfile?
  ownerProfile          OwnerProfile?
  technicianProfile     TechnicianProfile?
  tenantProfile         TenantProfile?

  // Relationships by role / existing app models
  managedProperties   Property[]       @relation("PropertyManager")
  subscriptions       Subscription[]
  ownedProperties     PropertyOwner[]
  tenantUnits         UnitTenant[]

  assignedInspections  Inspection[]    @relation("AssignedTechnician")
  completedInspections Inspection[]    @relation("CompletedBy")
  assignedJobs         Job[]           @relation("AssignedTechnician")

  sentInvites         Invite[]         @relation("InvitedBy")
  receivedInvite      Invite?          @relation("InvitedUser")
  notifications       Notification[]
  serviceRequests     ServiceRequest[]

  createdRecommendations  Recommendation[] @relation("CreatedBy")
  approvedRecommendations Recommendation[] @relation("ApprovedBy")

  uploadedAttachments InspectionAttachment[]
  createdReminders    InspectionReminder[]
  auditLogs           InspectionAuditLog[]
  reportRequests    ReportRequest[]

  @@index([email])
  @@index([role])
}

// ======================================================
// INVITES
// ======================================================
model Invite {
  id            String       @id @default(cuid())
  email         String
  role          Role
  token         String       @unique
  status        InviteStatus @default(PENDING)
  expiresAt     DateTime
  createdAt     DateTime     @default(now())

  invitedById   String
  invitedBy     User         @relation("InvitedBy", fields: [invitedById], references: [id], onDelete: Cascade)

  invitedUserId String?      @unique
  invitedUser   User?        @relation("InvitedUser", fields: [invitedUserId], references: [id])

  propertyId    String?
  property      Property?    @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  unitId        String?
  unit          Unit?        @relation(fields: [unitId], references: [id], onDelete: Cascade)

  @@index([email])
  @@index([token])
  @@index([status])
}

// ======================================================
// SUBSCRIPTION & BILLING (keep existing model)
// ======================================================
model Subscription {
  id                    String             @id @default(cuid())
  userId                String
  user                  User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  planId                String
  planName              String
  status                SubscriptionStatus @default(TRIAL)

  // Stripe data
  stripeCustomerId      String?  @unique
  stripeSubscriptionId  String?  @unique
  stripeCurrentPeriodEnd DateTime?

  // Trial
  trialStartDate        DateTime @default(now())
  trialEndDate          DateTime?

  startDate             DateTime @default(now())
  endDate               DateTime?
  cancelledAt           DateTime?

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@index([userId])
  @@index([status])
}

// ======================================================
// PROPERTIES & UNITS
// ======================================================
model Property {
  id              String         @id @default(cuid())
  name            String
  address         String
  city            String
  state           String?
  zipCode         String?
  country         String

  propertyType    String
  yearBuilt       Int?
  totalUnits      Int            @default(0)
  totalArea       Float?

  status          PropertyStatus @default(ACTIVE)

  description     String?        @db.Text
  imageUrl        String?

  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  managerId       String
  manager         User           @relation("PropertyManager", fields: [managerId], references: [id], onDelete: Cascade)

  units           Unit[]
  owners          PropertyOwner[]
  inspections     Inspection[]
  jobs            Job[]
  plans           MaintenancePlan[]
  serviceRequests ServiceRequest[]
  invites         Invite[]
  reportRequests ReportRequest[]

  @@index([managerId])
  @@index([status])
  @@index([city, state])
}

model PropertyOwner {
  id                  String   @id @default(cuid())

  propertyId          String
  property            Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  ownerId             String
  owner               User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  ownershipPercentage Float    @default(100.0)
  startDate           DateTime @default(now())
  endDate             DateTime?

  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@unique([propertyId, ownerId])
  @@index([propertyId])
  @@index([ownerId])
}

model Unit {
  id              String     @id @default(cuid())
  unitNumber      String

  propertyId      String
  property        Property   @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  floor           Int?
  bedrooms        Int?
  bathrooms       Float?
  area            Float?

  rentAmount      Float?
  status          UnitStatus @default(AVAILABLE)

  description     String?    @db.Text
  imageUrl        String?

  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  tenants         UnitTenant[]
  inspections     Inspection[]
  jobs            Job[]
  invites         Invite[]
  serviceRequests ServiceRequest[]
  reportRequests  ReportRequest[]

  @@unique([propertyId, unitNumber])
  @@index([propertyId])
  @@index([status])
}

model UnitTenant {
  id            String   @id @default(cuid())

  unitId        String
  unit          Unit     @relation(fields: [unitId], references: [id], onDelete: Cascade)

  tenantId      String
  tenant        User     @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  leaseStart    DateTime
  leaseEnd      DateTime
  rentAmount    Float
  depositAmount Float?

  isActive      Boolean  @default(true)

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([unitId])
  @@index([tenantId])
  @@index([isActive])
}

// ======================================================
// INSPECTIONS
// ======================================================
model Inspection {
  id              String           @id @default(cuid())
  title           String
  type            InspectionType
  scheduledDate   DateTime
  completedDate   DateTime?

  propertyId      String?
  property        Property?        @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  unitId          String?
  unit            Unit?            @relation(fields: [unitId], references: [id], onDelete: Cascade)

  assignedToId    String?
  assignedTo      User?            @relation("AssignedTechnician", fields: [assignedToId], references: [id], onDelete: SetNull)

  completedById   String?
  completedBy     User?            @relation("CompletedBy", fields: [completedById], references: [id], onDelete: SetNull)

  status          InspectionStatus @default(SCHEDULED)
  notes           String?          @db.Text
  findings        String?          @db.Text

  photos          Json?
  attachments     InspectionAttachment[]
  tags            String[]         @default([])

  reminders       InspectionReminder[]
  auditLogs       InspectionAuditLog[]
  jobs            Job[]

  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  report          Report?

  @@index([propertyId])
  @@index([unitId])
  @@index([assignedToId])
  @@index([status])
  @@index([scheduledDate])
}

// ======================================================
// JOBS
// ======================================================
model Job {
  id              String      @id @default(cuid())
  title           String
  description     String      @db.Text
  priority        JobPriority @default(MEDIUM)
  status          JobStatus   @default(OPEN)

  propertyId      String?
  property        Property?   @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  unitId          String?
  unit            Unit?       @relation(fields: [unitId], references: [id], onDelete: Cascade)

  assignedToId    String?
  assignedTo      User?       @relation("AssignedTechnician", fields: [assignedToId], references: [id], onDelete: SetNull)

  serviceRequestId String?
  serviceRequest   ServiceRequest? @relation(fields: [serviceRequestId], references: [id], onDelete: SetNull)

  maintenancePlanId String?
  maintenancePlan   MaintenancePlan? @relation(fields: [maintenancePlanId], references: [id], onDelete: SetNull)

  inspectionId    String?
  inspection      Inspection? @relation(fields: [inspectionId], references: [id], onDelete: SetNull)

  scheduledDate   DateTime?
  completedDate   DateTime?
  estimatedCost   Float?
  actualCost      Float?

  evidence        Json?
  notes           String?     @db.Text

  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@index([propertyId])
  @@index([unitId])
  @@index([assignedToId])
  @@index([status])
  @@index([priority])
  @@index([scheduledDate])
  @@index([inspectionId])
}

// ======================================================
// INSPECTION ATTACHMENTS
// ======================================================

model InspectionAttachment {
  id            String     @id @default(cuid())
  inspectionId  String
  inspection    Inspection @relation(fields: [inspectionId], references: [id], onDelete: Cascade)

  url           String
  name          String
  mimeType      String
  size          Int?
  annotations   Json?

  uploadedById  String?
  uploadedBy    User?      @relation(fields: [uploadedById], references: [id], onDelete: SetNull)

  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@index([inspectionId])
  @@index([uploadedById])
}

// ======================================================
// INSPECTION REMINDERS
// ======================================================

model InspectionReminder {
  id            String     @id @default(cuid())
  inspectionId  String
  inspection    Inspection @relation(fields: [inspectionId], references: [id], onDelete: Cascade)

  remindAt      DateTime
  channel       String     @default("IN_APP")
  recipients    String[]   @default([])
  status        String     @default("PENDING")
  deliveredAt   DateTime?
  metadata      Json?

  createdById   String?
  createdBy     User?      @relation(fields: [createdById], references: [id], onDelete: SetNull)

  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@index([inspectionId])
  @@index([remindAt])
  @@index([status])
}

// ======================================================
// INSPECTION AUDIT LOGS
// ======================================================

model InspectionAuditLog {
  id           String     @id @default(cuid())
  inspectionId String
  inspection   Inspection @relation(fields: [inspectionId], references: [id], onDelete: Cascade)

  userId       String?
  user         User?      @relation(fields: [userId], references: [id], onDelete: SetNull)

  action       String
  changes      Json?

  createdAt    DateTime   @default(now())

  @@index([inspectionId])
  @@index([userId])
  @@index([createdAt])
}

// ======================================================
// MAINTENANCE PLANS
// ======================================================
model MaintenancePlan {
  id                String   @id @default(cuid())
  name              String
  description       String?  @db.Text

  propertyId        String
  property          Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  frequency         String
  nextDueDate       DateTime
  lastCompletedDate DateTime?

  autoCreateJobs    Boolean  @default(false)
  isActive          Boolean  @default(true)

  jobs              Job[]

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([propertyId])
  @@index([isActive])
  @@index([nextDueDate])
}

// ======================================================
// SERVICE REQUESTS
// ======================================================
model ServiceRequest {
  id              String               @id @default(cuid())
  title           String
  description     String               @db.Text
  category        ServiceRequestCategory
  priority        JobPriority          @default(MEDIUM)
  status          ServiceRequestStatus @default(SUBMITTED)

  propertyId      String
  property        Property             @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  unitId          String?
  unit            Unit?                @relation(fields: [unitId], references: [id], onDelete: SetNull)

  requestedById   String
  requestedBy     User                 @relation(fields: [requestedById], references: [id], onDelete: Cascade)

  photos          Json?

  reviewNotes     String?              @db.Text
  reviewedAt      DateTime?

  jobs            Job[]

  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt

  @@index([propertyId])
  @@index([unitId])
  @@index([requestedById])
  @@index([status])
  @@index([category])
}

// ======================================================
// REPORTS
// ======================================================
enum ReportStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

model ReportRequest {
  id            String       @id @default(cuid())
  reportType    String
  status        ReportStatus @default(PENDING)
  parameters    Json
  fileUrl       String?
  requestedById String
  requestedBy   User         @relation(fields: [requestedById], references: [id], onDelete: Cascade)
  propertyId    String
  property      Property     @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  unitId        String?
  unit          Unit?        @relation(fields: [unitId], references: [id], onDelete: SetNull)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@index([requestedById])
  @@index([propertyId])
  @@index([status])
}

model Report {
  id              String   @id @default(cuid())
  title           String

  inspectionId    String   @unique
  inspection      Inspection @relation(fields: [inspectionId], references: [id], onDelete: Cascade)

  summary         String   @db.Text
  findings        String   @db.Text

  pdfUrl          String?
  data            Json?

  recommendations Recommendation[]

  generatedDate   DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([inspectionId])
  @@index([generatedDate])
}

// ======================================================
// RECOMMENDATIONS
// ======================================================
model Recommendation {
  id              String               @id @default(cuid())
  title           String
  description     String               @db.Text

  reportId        String
  report          Report               @relation(fields: [reportId], references: [id], onDelete: Cascade)

  estimatedCost   Float?
  priority        JobPriority          @default(MEDIUM)
  status          RecommendationStatus @default(DRAFT)

  createdById     String
  createdBy       User                 @relation("CreatedBy", fields: [createdById], references: [id], onDelete: Cascade)

  approvedById    String?
  approvedBy      User?                @relation("ApprovedBy", fields: [approvedById], references: [id], onDelete: SetNull)

  approvedAt      DateTime?
  implementedAt   DateTime?

  rejectionReason String?              @db.Text

  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt

  @@index([reportId])
  @@index([status])
  @@index([createdById])
}

// ======================================================
// NOTIFICATIONS
// ======================================================
model Notification {
  id         String     @id @default(cuid())
  userId     String
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  type       NotificationType
  title      String
  message    String     @db.Text

  isRead     Boolean    @default(false)
  readAt     DateTime?

  entityType String?
  entityId   String?

  createdAt  DateTime   @default(now())

  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
}
