generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Org {
  id         String     @id @default(cuid())
  name       String
  users      User[]
  properties Property[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

enum UserRole {
  ADMIN
  PROPERTY_MANAGER
  OWNER
  TECHNICIAN
  TENANT
}

enum SubscriptionStatus {
  TRIAL
  ACTIVE
  CANCELLED
  SUSPENDED
  PAST_DUE
}

model User {
  id                String              @id @default(cuid())
  email             String              @unique
  name              String?
  passwordHash      String?
  role              UserRole            @default(TENANT)
  phone             String?
  company           String?
  googleId          String?             @unique
  appleId           String?             @unique
  emailVerified     Boolean             @default(false)
  isActive          Boolean             @default(true)
  
  // Subscription fields (for PROPERTY_MANAGER only)
  subscriptionPlan      String?
  subscriptionStatus    SubscriptionStatus?
  trialEndDate          DateTime?
  subscriptionStartDate DateTime?
  subscriptionEndDate   DateTime?
  stripeCustomerId      String?           @unique
  stripeSubscriptionId  String?           @unique
  
  // Organization relationship
  orgId             String
  org               Org                 @relation(fields: [orgId], references: [id])
  
  // Role-specific profiles
  tenantProfile     TenantProfile?
  technicianProfile TechnicianProfile?
  propertyManagerProfile PropertyManagerProfile?
  ownerProfile      OwnerProfile?
  
  // Relationships
  tenantUnitLinks   TenantUnitLink[]
  maintenanceRequests MaintenanceRequest[]
  requestMessages   RequestMessage[]
  assignedJobs      Job[]               @relation("AssignedTechnician")
  createdJobs       Job[]               @relation("JobCreator")
  
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  @@index([email])
  @@index([role])
  @@index([orgId])
  @@index([isActive])
  @@index([subscriptionStatus])
  @@index([stripeCustomerId])
}

model TenantProfile {
  id                  String   @id @default(cuid())
  userId              String   @unique
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  phone               String?
  preferredChannel    String   @default("EMAIL")
  language            String   @default("EN")
  accessibilityNeeds  String?
  petNote             String?
  entryPermission     Boolean  @default(false)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model Property {
  id                  String              @id @default(cuid())
  name                String
  address             String?
  city                String?
  postcode            String?
  country             String?
  type                String?
  status              String              @default("Active")
  orgId               String
  org                 Org                 @relation(fields: [orgId], references: [id])
  units               Unit[]
  maintenanceRequests MaintenanceRequest[]
  announcements       Announcement[]
  documents           Document[]
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt

  @@index([orgId])
}

model Unit {
  id              String           @id @default(cuid())
  propertyId      String
  property        Property         @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  unitCode        String
  address         String?
  bedrooms        Int?
  status          String           @default("Vacant")
  tenantLinks     TenantUnitLink[]
  maintenanceRequests MaintenanceRequest[]
  documents       Document[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@index([propertyId])
}

model TenantUnitLink {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  unitId        String
  unit          Unit      @relation(fields: [unitId], references: [id], onDelete: Cascade)
  propertyId    String
  status        String    @default("PENDING")
  role          String    @default("PRIMARY_OCCUPANT")
  active        Boolean   @default(false)
  moveInDate    String?
  rejectionReason String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  approvedAt    DateTime?
  revokedAt     DateTime?

  @@index([userId])
  @@index([unitId])
  @@index([status])
}

model MaintenanceRequest {
  id                  String           @id @default(cuid())
  unitId              String
  unit                Unit             @relation(fields: [unitId], references: [id])
  propertyId          String
  property            Property         @relation(fields: [propertyId], references: [id])
  createdByUserId     String
  createdBy           User             @relation(fields: [createdByUserId], references: [id])
  category            String
  urgency             String
  title               String
  description         String
  status              String           @default("SUBMITTED")
  mediaUrls           Json?
  accessNotes         String?
  availabilityWindows Json?
  technicianId        String?
  rating              Json?
  messages            RequestMessage[]
  events              RequestEvent[]
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  closedAt            DateTime?

  @@index([createdByUserId])
  @@index([status])
  @@index([propertyId])
}

model RequestMessage {
  id          String             @id @default(cuid())
  requestId   String
  request     MaintenanceRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)
  authorId    String
  author      User               @relation(fields: [authorId], references: [id])
  authorName  String
  authorRole  String
  message     String
  attachments Json?
  createdAt   DateTime           @default(now())

  @@index([requestId])
}

model RequestEvent {
  id         String             @id @default(cuid())
  requestId  String
  request    MaintenanceRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)
  type       String
  actorRole  String
  actorName  String
  notes      String?
  createdAt  DateTime           @default(now())

  @@index([requestId])
}

model Announcement {
  id          String   @id @default(cuid())
  propertyId  String
  property    Property @relation(fields: [propertyId], references: [id])
  title       String
  body        String
  severity    String   @default("INFO")
  requiresAck Boolean  @default(false)
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([propertyId])
}

model Document {
  id         String   @id @default(cuid())
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id])
  unitId     String?
  unit       Unit?    @relation(fields: [unitId], references: [id])
  title      String
  type       String
  url        String
  uploadedAt DateTime @default(now())

  @@index([propertyId])
  @@index([unitId])
}

model TechnicianProfile {
  id                  String   @id @default(cuid())
  userId              String   @unique
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Technician-specific fields
  certifications      Json?    // Array of certifications
  specialties         Json?    // Array of specialties (plumbing, electrical, etc.)
  licenseNumber       String?
  emergencyContact    String?
  
  // Access control
  canAccessAllProperties Boolean @default(false)
  propertyAccess      Json?    // Array of property IDs they can access
  
  // Check-in/out tracking
  currentCheckIn      Json?    // {propertyId, unitId, timestamp, location}
  
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model PropertyManagerProfile {
  id                  String   @id @default(cuid())
  userId              String   @unique
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Property Manager specific fields
  managedProperties   Json?    // Array of property IDs they manage
  permissions         Json?    // Custom permissions object
  
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model OwnerProfile {
  id                  String   @id @default(cuid())
  userId              String   @unique
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Owner-specific fields
  ownedProperties     Json?    // Array of property IDs they own
  assignedBy          String?  // Property Manager who assigned them
  viewOnlyAccess      Boolean  @default(true)
  
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model Job {
  id                  String   @id @default(cuid())
  title               String
  description         String
  status              String   @default("PENDING") // PENDING, ASSIGNED, IN_PROGRESS, COMPLETED, CANCELLED
  priority            String   @default("MEDIUM") // LOW, MEDIUM, HIGH, URGENT
  
  // Relationships
  propertyId          String
  unitId              String?
  assignedToId        String?
  assignedTo          User?    @relation("AssignedTechnician", fields: [assignedToId], references: [id])
  createdById         String
  createdBy           User     @relation("JobCreator", fields: [createdById], references: [id])
  maintenanceRequestId String?
  
  // Job details
  scheduledStart      DateTime?
  scheduledEnd        DateTime?
  actualStart         DateTime?
  actualEnd           DateTime?
  
  // Check-in/out data
  checkInData         Json?    // {timestamp, location, photos}
  checkOutData        Json?    // {timestamp, location, photos, completionNotes}
  
  // Safety
  safetyCheckCompleted Boolean  @default(false)
  safetyCheckData     Json?    // Toolbox talk, PPE checklist, etc.
  
  // Work details
  workPerformed       String?
  materialsUsed       Json?
  timeSpentMinutes    Int?
  photos              Json?
  
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  completedAt         DateTime?
  
  @@index([assignedToId])
  @@index([status])
  @@index([propertyId])
  @@index([createdById])
}
