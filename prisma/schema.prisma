// Complete AgentFM MVP Schema
// This extends the previous schema with all remaining modules

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  PROPERTY_MANAGER
  OWNER
  TENANT
  TECHNICIAN
}

enum SubscriptionStatus {
  TRIAL
  ACTIVE
  PENDING
  SUSPENDED
  CANCELLED
}

enum PropertyStatus {
  ACTIVE
  INACTIVE
  UNDER_MAINTENANCE
}

enum UnitStatus {
  AVAILABLE
  OCCUPIED
  MAINTENANCE
  VACANT
}

enum InviteStatus {
  PENDING
  ACCEPTED
  EXPIRED
}

enum InspectionStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum InspectionType {
  ROUTINE
  MOVE_IN
  MOVE_OUT
  EMERGENCY
  COMPLIANCE
}

enum JobStatus {
  OPEN
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum JobPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ServiceRequestStatus {
  SUBMITTED
  UNDER_REVIEW
  APPROVED
  CONVERTED_TO_JOB
  REJECTED
  COMPLETED
}

enum ServiceRequestCategory {
  PLUMBING
  ELECTRICAL
  HVAC
  APPLIANCE
  STRUCTURAL
  PEST_CONTROL
  LANDSCAPING
  GENERAL
  OTHER
}

enum RecommendationStatus {
  DRAFT
  SUBMITTED
  UNDER_REVIEW
  APPROVED
  REJECTED
  IMPLEMENTED
}

enum NotificationType {
  INSPECTION_SCHEDULED
  INSPECTION_REMINDER
  JOB_ASSIGNED
  JOB_COMPLETED
  SERVICE_REQUEST_UPDATE
  SUBSCRIPTION_EXPIRING
  PAYMENT_DUE
  SYSTEM
}

// ============================================
// USER & AUTHENTICATION
// ============================================

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  passwordHash  String
  firstName     String
  lastName      String
  phone         String?
  role          Role
  isActive      Boolean  @default(true)
  lastLoginAt   DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationships by role
  managedProperties   Property[]       @relation("PropertyManager")
  subscriptions       Subscription[]
  ownedProperties     PropertyOwner[]
  tenantUnits         UnitTenant[]
  
  // Work assignments
  assignedInspections Inspection[]     @relation("AssignedTechnician")
  completedInspections Inspection[]    @relation("CompletedBy")
  assignedJobs        Job[]            @relation("AssignedTechnician")
  
  // Communications
  sentInvites         Invite[]         @relation("InvitedBy")
  receivedInvite      Invite?          @relation("InvitedUser")
  notifications       Notification[]
  serviceRequests     ServiceRequest[]
  
  // Activity
  createdRecommendations Recommendation[] @relation("CreatedBy")
  approvedRecommendations Recommendation[] @relation("ApprovedBy")

  @@index([email])
  @@index([role])
}

model Invite {
  id            String       @id @default(cuid())
  email         String
  role          Role
  token         String       @unique
  status        InviteStatus @default(PENDING)
  expiresAt     DateTime
  createdAt     DateTime     @default(now())
  
  invitedById   String
  invitedBy     User         @relation("InvitedBy", fields: [invitedById], references: [id], onDelete: Cascade)
  
  invitedUserId String?      @unique
  invitedUser   User?        @relation("InvitedUser", fields: [invitedUserId], references: [id])
  
  propertyId    String?
  property      Property?    @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  
  unitId        String?
  unit          Unit?        @relation(fields: [unitId], references: [id], onDelete: Cascade)

  @@index([email])
  @@index([token])
  @@index([status])
}

// ============================================
// SUBSCRIPTION & BILLING
// ============================================

model Subscription {
  id                String             @id @default(cuid())
  userId            String
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  planId            String
  planName          String
  status            SubscriptionStatus @default(TRIAL)
  
  // Stripe data
  stripeCustomerId      String?    @unique
  stripeSubscriptionId  String?    @unique
  stripeCurrentPeriodEnd DateTime?
  
  // Trial
  trialStartDate    DateTime       @default(now())
  trialEndDate      DateTime?
  
  startDate         DateTime       @default(now())
  endDate           DateTime?
  cancelledAt       DateTime?
  
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  @@index([userId])
  @@index([status])
}

// ============================================
// PROPERTIES & UNITS
// ============================================

model Property {
  id              String         @id @default(cuid())
  name            String
  address         String
  city            String
  state           String
  zipCode         String
  country         String         @default("USA")
  
  propertyType    String
  yearBuilt       Int?
  totalUnits      Int            @default(0)
  totalArea       Float?
  
  status          PropertyStatus @default(ACTIVE)
  
  description     String?        @db.Text
  imageUrl        String?
  
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  
  managerId       String
  manager         User           @relation("PropertyManager", fields: [managerId], references: [id], onDelete: Cascade)
  
  units           Unit[]
  owners          PropertyOwner[]
  inspections     Inspection[]
  jobs            Job[]
  plans           MaintenancePlan[]
  serviceRequests ServiceRequest[]
  invites         Invite[]

  @@index([managerId])
  @@index([status])
  @@index([city, state])
}

model PropertyOwner {
  id                  String   @id @default(cuid())
  
  propertyId          String
  property            Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  
  ownerId             String
  owner               User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  
  ownershipPercentage Float    @default(100.0)
  startDate           DateTime @default(now())
  endDate             DateTime?
  
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@unique([propertyId, ownerId])
  @@index([propertyId])
  @@index([ownerId])
}

model Unit {
  id              String     @id @default(cuid())
  unitNumber      String
  
  propertyId      String
  property        Property   @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  
  floor           Int?
  bedrooms        Int?
  bathrooms       Float?
  area            Float?
  
  rentAmount      Float?
  status          UnitStatus @default(AVAILABLE)
  
  description     String?    @db.Text
  imageUrl        String?
  
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  
  tenants         UnitTenant[]
  inspections     Inspection[]
  jobs            Job[]
  invites         Invite[]
  serviceRequests ServiceRequest[]

  @@unique([propertyId, unitNumber])
  @@index([propertyId])
  @@index([status])
}

model UnitTenant {
  id            String   @id @default(cuid())
  
  unitId        String
  unit          Unit     @relation(fields: [unitId], references: [id], onDelete: Cascade)
  
  tenantId      String
  tenant        User     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  leaseStart    DateTime
  leaseEnd      DateTime
  rentAmount    Float
  depositAmount Float?
  
  isActive      Boolean  @default(true)
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([unitId])
  @@index([tenantId])
  @@index([isActive])
}

// ============================================
// INSPECTIONS
// ============================================

model Inspection {
  id              String           @id @default(cuid())
  title           String
  type            InspectionType
  scheduledDate   DateTime
  completedDate   DateTime?
  
  propertyId      String?
  property        Property?        @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  
  unitId          String?
  unit            Unit?            @relation(fields: [unitId], references: [id], onDelete: Cascade)
  
  assignedToId    String?
  assignedTo      User?            @relation("AssignedTechnician", fields: [assignedToId], references: [id], onDelete: SetNull)
  
  completedById   String?
  completedBy     User?            @relation("CompletedBy", fields: [completedById], references: [id], onDelete: SetNull)
  
  status          InspectionStatus @default(SCHEDULED)
  notes           String?          @db.Text
  findings        String?          @db.Text
  
  // Photos as JSON array of URLs
  photos          Json?
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  report          Report?

  @@index([propertyId])
  @@index([unitId])
  @@index([assignedToId])
  @@index([status])
  @@index([scheduledDate])
}

// ============================================
// JOBS
// ============================================

model Job {
  id              String      @id @default(cuid())
  title           String
  description     String      @db.Text
  priority        JobPriority @default(MEDIUM)
  status          JobStatus   @default(OPEN)
  
  propertyId      String?
  property        Property?   @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  
  unitId          String?
  unit            Unit?       @relation(fields: [unitId], references: [id], onDelete: Cascade)
  
  assignedToId    String?
  assignedTo      User?       @relation("AssignedTechnician", fields: [assignedToId], references: [id], onDelete: SetNull)
  
  // Linked from service request
  serviceRequestId String?
  serviceRequest   ServiceRequest? @relation(fields: [serviceRequestId], references: [id], onDelete: SetNull)
  
  // Linked from maintenance plan
  maintenancePlanId String?
  maintenancePlan   MaintenancePlan? @relation(fields: [maintenancePlanId], references: [id], onDelete: SetNull)
  
  scheduledDate   DateTime?
  completedDate   DateTime?
  estimatedCost   Float?
  actualCost      Float?
  
  // Evidence/photos as JSON
  evidence        Json?
  notes           String?     @db.Text
  
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@index([propertyId])
  @@index([unitId])
  @@index([assignedToId])
  @@index([status])
  @@index([priority])
  @@index([scheduledDate])
}

// ============================================
// MAINTENANCE PLANS
// ============================================

model MaintenancePlan {
  id                String   @id @default(cuid())
  name              String
  description       String?  @db.Text
  
  propertyId        String
  property          Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  
  frequency         String   // daily, weekly, monthly, quarterly, annually
  nextDueDate       DateTime
  lastCompletedDate DateTime?
  
  // Auto-create jobs
  autoCreateJobs    Boolean  @default(false)
  
  isActive          Boolean  @default(true)
  
  jobs              Job[]
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([propertyId])
  @@index([isActive])
  @@index([nextDueDate])
}

// ============================================
// SERVICE REQUESTS
// ============================================

model ServiceRequest {
  id              String               @id @default(cuid())
  title           String
  description     String               @db.Text
  category        ServiceRequestCategory
  priority        JobPriority          @default(MEDIUM)
  status          ServiceRequestStatus @default(SUBMITTED)
  
  propertyId      String
  property        Property             @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  
  unitId          String?
  unit            Unit?                @relation(fields: [unitId], references: [id], onDelete: SetNull)
  
  requestedById   String
  requestedBy     User                 @relation(fields: [requestedById], references: [id], onDelete: Cascade)
  
  // Photos as JSON array
  photos          Json?
  
  // Manager response
  reviewNotes     String?              @db.Text
  reviewedAt      DateTime?
  
  jobs            Job[]
  
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt

  @@index([propertyId])
  @@index([unitId])
  @@index([requestedById])
  @@index([status])
  @@index([category])
}

// ============================================
// REPORTS
// ============================================

model Report {
  id              String   @id @default(cuid())
  title           String
  
  inspectionId    String   @unique
  inspection      Inspection @relation(fields: [inspectionId], references: [id], onDelete: Cascade)
  
  summary         String   @db.Text
  findings        String   @db.Text
  
  // PDF file URL
  pdfUrl          String?
  
  // Report data as JSON
  data            Json?
  
  recommendations Recommendation[]
  
  generatedDate   DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([inspectionId])
  @@index([generatedDate])
}

// ============================================
// RECOMMENDATIONS
// ============================================

model Recommendation {
  id              String               @id @default(cuid())
  title           String
  description     String               @db.Text
  
  reportId        String
  report          Report               @relation(fields: [reportId], references: [id], onDelete: Cascade)
  
  estimatedCost   Float?
  priority        JobPriority          @default(MEDIUM)
  status          RecommendationStatus @default(DRAFT)
  
  createdById     String
  createdBy       User                 @relation("CreatedBy", fields: [createdById], references: [id], onDelete: Cascade)
  
  approvedById    String?
  approvedBy      User?                @relation("ApprovedBy", fields: [approvedById], references: [id], onDelete: SetNull)
  
  approvedAt      DateTime?
  implementedAt   DateTime?
  
  rejectionReason String?              @db.Text
  
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt

  @@index([reportId])
  @@index([status])
  @@index([createdById])
}

// ============================================
// NOTIFICATIONS
// ============================================

model Notification {
  id              String           @id @default(cuid())
  userId          String
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  type            NotificationType
  title           String
  message         String           @db.Text
  
  isRead          Boolean          @default(false)
  readAt          DateTime?
  
  // Link to related entity
  entityType      String?          // 'inspection', 'job', 'service_request', etc.
  entityId        String?
  
  createdAt       DateTime         @default(now())

  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
}
